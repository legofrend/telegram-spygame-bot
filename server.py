"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
import logging
import os, re
import asyncio
import random

from games import pls, games, Player

from aiogram import Bot, Dispatcher, executor, types

logging.basicConfig(level=logging.INFO)
# logging.basicConfig(level=logging.INFO, filename='bot.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
PROXY_URL = None # os.getenv("TELEGRAM_PROXY_URL")
PROXY_AUTH = None
"""aiohttp.BasicAuth(
    login=os.getenv("TELEGRAM_PROXY_LOGIN"),
    password=os.getenv("TELEGRAM_PROXY_PASSWORD")
)"""

bot = Bot(token=API_TOKEN, proxy=PROXY_URL, proxy_auth=PROXY_AUTH)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    await message.answer(
        "–ë–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –ù–∞—Ö–æ–¥–∫—É –¥–ª—è —à–ø–∏–æ–Ω–∞\n\n"
        "/new [Name] —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/join [Name] –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
        "/round - –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥\n"
        "/loc - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –∏–≥—Ä—ã\n"
        "/game - –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö\n"
    )

@dp.message_handler(lambda message: message.text.startswith('/new'))
async def new_game(message: types.Message):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º Game"""
    regexp_result = re.match(r"/[^ ]+ (.*)", message.text)
    game_name = regexp_result[1]

    pl_id = message.from_user.id
    if pl_id not in pls.keys():
        npl = Player(pl_id, message.from_user.full_name, message.from_user.language_code)
    else:
        npl = pls[pl_id]
    if npl.game is not None:
        answer_message = "–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ" + npl.game.name
    else:
        if npl.create_game(game_name):
            answer_message = "C–æ–∑–¥–∞–ª–∏ –∏–≥—Ä—É: " + game_name
            if True:
                pl1 = Player(1, "Oleg")
                pl2 = Player(2, "Ira")
                pl3 = Player(3, "Borya")
                pl4 = Player(4, "Katya")
                pl1.join_game(game_name)
                pl2.join_game(game_name)
                pl3.join_game(game_name)
                pl4.join_game(game_name)

    await message.answer(answer_message)


@dp.message_handler(lambda message: message.text.startswith('/join'))
async def join_game(message: types.Message):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º Game"""
    regexp_result = re.match(r"/[^ ]+ (.*)", message.text)

    game_name = regexp_result[1]
    pl_id = message.from_user.id
    if pl_id in pls.keys() and pls[pl_id].game is not None:
        answer_message = "–í—ã –µ—â–µ –≤ –∏–≥—Ä–µ " + pls[pl_id].game.name
    else:
        npl = Player(pl_id, message.from_user.full_name, message.from_user.language_code)
        npl.join_game(game_name)
        answer_message = "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ " + game_name + ", –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ç–∞—Ä—Ç–∞ —Ä–∞—É–Ω–¥–∞"


    await message.answer(answer_message)


@dp.message_handler(lambda message: message.text.startswith('/round'))
async def new_round(message: types.Message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥"""
    pl_id = message.from_user.id
    if pl_id in pls.keys() and pls[pl_id].game is not None:
        pls[pl_id].start_round()
        r = pls[pl_id].game.round

        for pl, role in r.roles.items():
            loc_name = "???" if r.spy == pl else r.location.name
            answer_message = f"–õ–æ–∫–∞—Ü–∏—è: {loc_name}\n–†–æ–ª—å: {role}"
            pl_name = pls[pl].full_name
            logging.info(f"{pl} ({pl_name}): {answer_message}")
            if pl > 100:
                await bot.send_message(pl, answer_message)
    else:
        answer_message = "–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∏–≥—Ä—É"
        await message.answer(answer_message)


@dp.message_handler(lambda message: message.text.startswith('/finish'))
async def finish_round(message: types.Message):
    """–í—ã–±—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–∞—É–Ω–¥–∞"""
    pl_id = message.from_user.id
    winner_type = int(random.random()*5)
    winner_str = "—à–ø–∏–æ–Ω" if winner_type < 4 else "–∞–Ω—Ç–∏—à–ø–∏–æ–Ω"
    if pl_id in pls.keys() and pls[pl_id].game is not None:
        pls[pl_id].finish_round(winner_type)
        answer_message = f"–†–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω, –ø–æ–±–µ–¥–∏–ª {winner_str}"
    else:
        answer_message = "–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∏–≥—Ä—É"

    await message.answer(answer_message)


@dp.message_handler(lambda message: message.text.startswith('/loc'))
async def list_locations(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π"""
    pl_id = message.from_user.id
    if pl_id in pls.keys() and pls[pl_id].game is not None:
        answer_message = pls[pl_id].get_game_locations()
    else:
        answer_message = "–í—ã –µ—â–µ –Ω–µ –≤ –∏–≥—Ä–µ"
    await message.answer(answer_message)


@dp.message_handler(lambda message: message.text.startswith('/game'))
async def game_stat(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ"""
    pl_id = message.from_user.id
    if pl_id in pls.keys() and pls[pl_id].game is not None:
        answer_message = pls[pl_id].get_game_info()
    else:
        answer_message = "–í—ã –µ—â–µ –Ω–µ –≤ –∏–≥—Ä–µ"
    await message.answer(answer_message)


@dp.message_handler(lambda message: message.text.startswith('test'))
async def new_round(message: types.Message):
    """Testing"""
    chat_id = 146076472
    #await message.answer_dice(emoji="üé≤")
    with open('hello.jpg', 'rb') as photo:
        await bot.send_photo(chat_id, photo)
    keyboard = types.InlineKeyboardMarkup()
    
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∂–º–∏ –º–µ–Ω—è', callback_data='button_pressed'))
    await bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!', reply_markup=keyboard)

@dp.errors_handler()
async def errors_handler(update: types.Update, exception: Exception):
    logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {update}: {exception}')


async def send_message(message: str):
    await bot.send_message(146076472, message)

def test_log():
    logging.debug('–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    logging.warning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')
    logging.error('–û—à–∏–±–∫–∞')
    logging.critical('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞')

if __name__ == '__main__':
   # asyncio.run(send_message('hi'))
    executor.start_polling(dp, skip_updates=True)


"""
146076472 (Oleg Eremin): You get 2 scores in round 5. Total: 2
{"id": 146076472, "is_bot": false, "first_name": "Oleg", "last_name": "Eremin", "username": "Oeremin", "language_code": "ru"}
"""